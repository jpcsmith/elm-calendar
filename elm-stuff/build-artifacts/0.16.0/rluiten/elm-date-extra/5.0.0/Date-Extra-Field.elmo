Elm.Date = Elm.Date || {};
Elm.Date.Extra = Elm.Date.Extra || {};
Elm.Date.Extra.Field = Elm.Date.Extra.Field || {};
Elm.Date.Extra.Field.make = function (_elm) {
   "use strict";
   _elm.Date = _elm.Date || {};
   _elm.Date.Extra = _elm.Date.Extra || {};
   _elm.Date.Extra.Field = _elm.Date.Extra.Field || {};
   if (_elm.Date.Extra.Field.values) return _elm.Date.Extra.Field.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Date = Elm.Date.make(_elm),
   $Date$Extra$Core = Elm.Date.Extra.Core.make(_elm),
   $Date$Extra$Duration = Elm.Date.Extra.Duration.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var dayOfWeekToDate = F3(function (newDayOfWeek,startOfWeekDay,date) {
      var targetIsoDay = $Date$Extra$Core.isoDayOfWeek(newDayOfWeek);
      var dayOfWeek = $Date.dayOfWeek(date);
      var daysToStartOfWeek = A2($Date$Extra$Core.daysBackToStartOfWeek,dayOfWeek,startOfWeekDay);
      var isoDay = $Date$Extra$Core.isoDayOfWeek(dayOfWeek);
      var dayDiff = targetIsoDay - isoDay;
      var adjustedDiff = _U.cmp(daysToStartOfWeek + dayDiff,0) < 0 ? dayDiff + 7 : dayDiff;
      return A3($Date$Extra$Duration.add,$Date$Extra$Duration.Day,adjustedDiff,date);
   });
   var monthToDate = F2(function (month,date) {
      var monthInt = $Date$Extra$Core.monthToInt($Date.month(date));
      var targetMonthInt = $Date$Extra$Core.monthToInt(month);
      return A3($Date$Extra$Duration.add,$Date$Extra$Duration.Month,targetMonthInt - monthInt,date);
   });
   var fieldToDateClamp = F2(function (field,date) {
      var _p0 = field;
      switch (_p0.ctor)
      {case "Millisecond": return A3($Date$Extra$Duration.add,$Date$Extra$Duration.Millisecond,A3($Basics.clamp,0,999,_p0._0) - $Date.millisecond(date),date);
         case "Second": return A3($Date$Extra$Duration.add,$Date$Extra$Duration.Second,A3($Basics.clamp,0,59,_p0._0) - $Date.second(date),date);
         case "Minute": return A3($Date$Extra$Duration.add,$Date$Extra$Duration.Minute,A3($Basics.clamp,0,59,_p0._0) - $Date.minute(date),date);
         case "Hour": return A3($Date$Extra$Duration.add,$Date$Extra$Duration.Hour,A3($Basics.clamp,0,23,_p0._0) - $Date.hour(date),date);
         case "DayOfWeek": return A3(dayOfWeekToDate,_p0._0._0,_p0._0._1,date);
         case "DayOfMonth": var maxDays = $Date$Extra$Core.daysInMonthDate(date);
           return A3($Date$Extra$Duration.add,$Date$Extra$Duration.Day,A3($Basics.clamp,1,maxDays,_p0._0) - $Date.day(date),date);
         case "Month": return A2(monthToDate,_p0._0,date);
         default: var _p1 = _p0._0;
           var minYear = _U.cmp(_p1,0) < 0 ? 0 : _p1;
           return A3($Date$Extra$Duration.add,$Date$Extra$Duration.Year,minYear - $Date.year(date),date);}
   });
   var fieldToDate = F2(function (field,date) {
      var _p2 = field;
      switch (_p2.ctor)
      {case "Millisecond": var _p3 = _p2._0;
           return _U.cmp(_p3,0) < 0 || _U.cmp(_p3,999) > 0 ? $Maybe.Nothing : $Maybe.Just(A3($Date$Extra$Duration.add,
           $Date$Extra$Duration.Millisecond,
           _p3 - $Date.millisecond(date),
           date));
         case "Second": var _p4 = _p2._0;
           return _U.cmp(_p4,0) < 0 || _U.cmp(_p4,59) > 0 ? $Maybe.Nothing : $Maybe.Just(A3($Date$Extra$Duration.add,
           $Date$Extra$Duration.Second,
           _p4 - $Date.second(date),
           date));
         case "Minute": var _p5 = _p2._0;
           return _U.cmp(_p5,0) < 0 || _U.cmp(_p5,59) > 0 ? $Maybe.Nothing : $Maybe.Just(A3($Date$Extra$Duration.add,
           $Date$Extra$Duration.Minute,
           _p5 - $Date.minute(date),
           date));
         case "Hour": var _p6 = _p2._0;
           return _U.cmp(_p6,0) < 0 || _U.cmp(_p6,23) > 0 ? $Maybe.Nothing : $Maybe.Just(A3($Date$Extra$Duration.add,
           $Date$Extra$Duration.Hour,
           _p6 - $Date.hour(date),
           date));
         case "DayOfWeek": return $Maybe.Just(A3(dayOfWeekToDate,_p2._0._0,_p2._0._1,date));
         case "DayOfMonth": var _p7 = _p2._0;
           var maxDays = $Date$Extra$Core.daysInMonthDate(date);
           return _U.cmp(_p7,1) < 0 || _U.cmp(_p7,maxDays) > 0 ? $Maybe.Nothing : $Maybe.Just(A3($Date$Extra$Duration.add,
           $Date$Extra$Duration.Day,
           _p7 - $Date.day(date),
           date));
         case "Month": return $Maybe.Just(A2(monthToDate,_p2._0,date));
         default: var _p8 = _p2._0;
           return _U.cmp(_p8,0) < 0 ? $Maybe.Nothing : $Maybe.Just(A3($Date$Extra$Duration.add,$Date$Extra$Duration.Year,_p8 - $Date.year(date),date));}
   });
   var Year = function (a) {    return {ctor: "Year",_0: a};};
   var Month = function (a) {    return {ctor: "Month",_0: a};};
   var DayOfMonth = function (a) {    return {ctor: "DayOfMonth",_0: a};};
   var DayOfWeek = function (a) {    return {ctor: "DayOfWeek",_0: a};};
   var Hour = function (a) {    return {ctor: "Hour",_0: a};};
   var Minute = function (a) {    return {ctor: "Minute",_0: a};};
   var Second = function (a) {    return {ctor: "Second",_0: a};};
   var Millisecond = function (a) {    return {ctor: "Millisecond",_0: a};};
   return _elm.Date.Extra.Field.values = {_op: _op
                                         ,fieldToDate: fieldToDate
                                         ,fieldToDateClamp: fieldToDateClamp
                                         ,Millisecond: Millisecond
                                         ,Second: Second
                                         ,Minute: Minute
                                         ,Hour: Hour
                                         ,DayOfWeek: DayOfWeek
                                         ,DayOfMonth: DayOfMonth
                                         ,Month: Month
                                         ,Year: Year};
};