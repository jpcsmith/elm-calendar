Elm.Date = Elm.Date || {};
Elm.Date.Extra = Elm.Date.Extra || {};
Elm.Date.Extra.Core = Elm.Date.Extra.Core || {};
Elm.Date.Extra.Core.make = function (_elm) {
   "use strict";
   _elm.Date = _elm.Date || {};
   _elm.Date.Extra = _elm.Date.Extra || {};
   _elm.Date.Extra.Core = _elm.Date.Extra.Core || {};
   if (_elm.Date.Extra.Core.values) return _elm.Date.Extra.Core.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Date = Elm.Date.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm);
   var _op = {};
   var prevMonth = function (month) {
      var _p0 = month;
      switch (_p0.ctor)
      {case "Jan": return $Date.Dec;
         case "Feb": return $Date.Jan;
         case "Mar": return $Date.Feb;
         case "Apr": return $Date.Mar;
         case "May": return $Date.Apr;
         case "Jun": return $Date.May;
         case "Jul": return $Date.Jun;
         case "Aug": return $Date.Jul;
         case "Sep": return $Date.Aug;
         case "Oct": return $Date.Sep;
         case "Nov": return $Date.Oct;
         default: return $Date.Nov;}
   };
   var nextMonth = function (month) {
      var _p1 = month;
      switch (_p1.ctor)
      {case "Jan": return $Date.Feb;
         case "Feb": return $Date.Mar;
         case "Mar": return $Date.Apr;
         case "Apr": return $Date.May;
         case "May": return $Date.Jun;
         case "Jun": return $Date.Jul;
         case "Jul": return $Date.Aug;
         case "Aug": return $Date.Sep;
         case "Sep": return $Date.Oct;
         case "Oct": return $Date.Nov;
         case "Nov": return $Date.Dec;
         default: return $Date.Jan;}
   };
   var intToMonth = function (month) {
      return _U.cmp(month,1) < 1 ? $Date.Jan : _U.eq(month,2) ? $Date.Feb : _U.eq(month,3) ? $Date.Mar : _U.eq(month,4) ? $Date.Apr : _U.eq(month,
      5) ? $Date.May : _U.eq(month,6) ? $Date.Jun : _U.eq(month,7) ? $Date.Jul : _U.eq(month,8) ? $Date.Aug : _U.eq(month,9) ? $Date.Sep : _U.eq(month,
      10) ? $Date.Oct : _U.eq(month,11) ? $Date.Nov : $Date.Dec;
   };
   var monthToInt = function (month) {
      var _p2 = month;
      switch (_p2.ctor)
      {case "Jan": return 1;
         case "Feb": return 2;
         case "Mar": return 3;
         case "Apr": return 4;
         case "May": return 5;
         case "Jun": return 6;
         case "Jul": return 7;
         case "Aug": return 8;
         case "Sep": return 9;
         case "Oct": return 10;
         case "Nov": return 11;
         default: return 12;}
   };
   var isLeapYear = function (year) {
      return _U.eq(A2($Basics._op["%"],year,4),0) && !_U.eq(A2($Basics._op["%"],year,100),0) || _U.eq(A2($Basics._op["%"],year,400),0);
   };
   var isLeapYearDate = function (date) {    return isLeapYear($Date.year(date));};
   var yearToDayLength = function (year) {    return isLeapYear(year) ? 366 : 365;};
   var daysInMonth = F2(function (year,month) {
      var _p3 = month;
      switch (_p3.ctor)
      {case "Jan": return 31;
         case "Feb": return isLeapYear(year) ? 29 : 28;
         case "Mar": return 31;
         case "Apr": return 30;
         case "May": return 31;
         case "Jun": return 30;
         case "Jul": return 31;
         case "Aug": return 31;
         case "Sep": return 30;
         case "Oct": return 31;
         case "Nov": return 30;
         default: return 31;}
   });
   var daysInMonthDate = function (date) {    return A2(daysInMonth,$Date.year(date),$Date.month(date));};
   var monthList = _U.list([$Date.Jan,$Date.Feb,$Date.Mar,$Date.Apr,$Date.May,$Date.Jun,$Date.Jul,$Date.Aug,$Date.Sep,$Date.Oct,$Date.Nov,$Date.Dec]);
   var toTime = function (_p4) {    return $Basics.floor($Date.toTime(_p4));};
   var fromTime = function (_p5) {    return $Date.fromTime($Basics.toFloat(_p5));};
   var prevDay = function (day) {
      var _p6 = day;
      switch (_p6.ctor)
      {case "Mon": return $Date.Sun;
         case "Tue": return $Date.Mon;
         case "Wed": return $Date.Tue;
         case "Thu": return $Date.Wed;
         case "Fri": return $Date.Thu;
         case "Sat": return $Date.Fri;
         default: return $Date.Sat;}
   };
   var nextDay = function (day) {
      var _p7 = day;
      switch (_p7.ctor)
      {case "Mon": return $Date.Tue;
         case "Tue": return $Date.Wed;
         case "Wed": return $Date.Thu;
         case "Thu": return $Date.Fri;
         case "Fri": return $Date.Sat;
         case "Sat": return $Date.Sun;
         default: return $Date.Mon;}
   };
   var isoDayOfWeek = function (day) {
      var _p8 = day;
      switch (_p8.ctor)
      {case "Mon": return 1;
         case "Tue": return 2;
         case "Wed": return 3;
         case "Thu": return 4;
         case "Fri": return 5;
         case "Sat": return 6;
         default: return 7;}
   };
   var daysBackToStartOfWeek = F2(function (dateDay,startOfWeekDay) {
      var startOfWeekDayIndex = isoDayOfWeek(startOfWeekDay);
      var dateDayIndex = isoDayOfWeek(dateDay);
      return _U.cmp(dateDayIndex,startOfWeekDayIndex) < 0 ? 7 + dateDayIndex - startOfWeekDayIndex : dateDayIndex - startOfWeekDayIndex;
   });
   var ticksAMillisecond = $Basics.floor($Time.millisecond);
   var ticksASecond = ticksAMillisecond * 1000;
   var ticksAMinute = ticksASecond * 60;
   var ticksAnHour = ticksAMinute * 60;
   var ticksADay = ticksAnHour * 24;
   var ticksAWeek = ticksADay * 7;
   var firstOfMonthTicks = function (date) {    var dateTicks = toTime(date);var day = $Date.day(date);return dateTicks + (1 - day) * ticksADay;};
   var lastOfPrevMonthDate = function (date) {    return fromTime(firstOfMonthTicks(date) - ticksADay);};
   var daysInPrevMonth = function (date) {    return daysInMonthDate(lastOfPrevMonthDate(date));};
   var toFirstOfMonth = function (date) {    return fromTime(firstOfMonthTicks(date));};
   var lastOfMonthTicks = function (date) {
      var dateTicks = toTime(date);
      var day = $Date.day(date);
      var month = $Date.month(date);
      var year = $Date.year(date);
      var daysInMonthVal = A2(daysInMonth,year,month);
      var addDays = daysInMonthVal - day;
      return dateTicks + addDays * ticksADay;
   };
   var firstOfNextMonthDate = function (date) {    return fromTime(lastOfMonthTicks(date) + ticksADay);};
   var daysInNextMonth = function (date) {    return daysInMonthDate(firstOfNextMonthDate(date));};
   var lastOfMonthDate = function (date) {    return fromTime(lastOfMonthTicks(date));};
   var epochDateStr = "1970-01-01T00:00:00Z";
   return _elm.Date.Extra.Core.values = {_op: _op
                                        ,daysInMonth: daysInMonth
                                        ,daysInNextMonth: daysInNextMonth
                                        ,daysInPrevMonth: daysInPrevMonth
                                        ,daysInMonthDate: daysInMonthDate
                                        ,daysBackToStartOfWeek: daysBackToStartOfWeek
                                        ,epochDateStr: epochDateStr
                                        ,firstOfNextMonthDate: firstOfNextMonthDate
                                        ,fromTime: fromTime
                                        ,intToMonth: intToMonth
                                        ,isLeapYear: isLeapYear
                                        ,isLeapYearDate: isLeapYearDate
                                        ,isoDayOfWeek: isoDayOfWeek
                                        ,lastOfMonthDate: lastOfMonthDate
                                        ,lastOfPrevMonthDate: lastOfPrevMonthDate
                                        ,monthList: monthList
                                        ,monthToInt: monthToInt
                                        ,nextDay: nextDay
                                        ,nextMonth: nextMonth
                                        ,prevDay: prevDay
                                        ,prevMonth: prevMonth
                                        ,ticksAnHour: ticksAnHour
                                        ,ticksADay: ticksADay
                                        ,ticksAMillisecond: ticksAMillisecond
                                        ,ticksAMinute: ticksAMinute
                                        ,ticksASecond: ticksASecond
                                        ,ticksAWeek: ticksAWeek
                                        ,toFirstOfMonth: toFirstOfMonth
                                        ,toTime: toTime
                                        ,yearToDayLength: yearToDayLength};
};