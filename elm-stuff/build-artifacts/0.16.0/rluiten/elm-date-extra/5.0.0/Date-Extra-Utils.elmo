Elm.Date = Elm.Date || {};
Elm.Date.Extra = Elm.Date.Extra || {};
Elm.Date.Extra.Utils = Elm.Date.Extra.Utils || {};
Elm.Date.Extra.Utils.make = function (_elm) {
   "use strict";
   _elm.Date = _elm.Date || {};
   _elm.Date.Extra = _elm.Date.Extra || {};
   _elm.Date.Extra.Utils = _elm.Date.Extra.Utils || {};
   if (_elm.Date.Extra.Utils.values) return _elm.Date.Extra.Utils.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Date = Elm.Date.make(_elm),
   $Date$Extra$Compare = Elm.Date.Extra.Compare.make(_elm),
   $Date$Extra$Core = Elm.Date.Extra.Core.make(_elm),
   $Date$Extra$Create = Elm.Date.Extra.Create.make(_elm),
   $Date$Extra$Floor = Elm.Date.Extra.Floor.make(_elm),
   $Date$Extra$Period = Elm.Date.Extra.Period.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var unsafeFromString = function (dateStr) {
      var _p0 = $Date.fromString(dateStr);
      if (_p0.ctor === "Ok") {
            return _p0._0;
         } else {
            return _U.crashCase("Date.Extra.Utils",{start: {line: 110,column: 3},end: {line: 112,column: 47}},_p0)("unsafeFromString");
         }
   };
   var isoDayofWeekMonday = $Date$Extra$Core.isoDayOfWeek($Date.Mon);
   var isoWeekOne = function (year) {
      var date = A7($Date$Extra$Create.dateFromFields,year,$Date.Jan,4,0,0,0,0);
      var isoDow = $Date$Extra$Core.isoDayOfWeek($Date.dayOfWeek(date));
      return A3($Date$Extra$Period.add,$Date$Extra$Period.Day,isoDayofWeekMonday - isoDow,date);
   };
   var isoWeek = function (date) {
      var dateAsDay = A2($Date$Extra$Floor.floor,$Date$Extra$Floor.Day,date);
      var inputYear = $Date.year(date);
      var endOfYearMaxIsoWeekDate = A7($Date$Extra$Create.dateFromFields,inputYear,$Date.Dec,29,0,0,0,0);
      var _p2 = function () {
         if (A3($Date$Extra$Compare.is,$Date$Extra$Compare.SameOrAfter,date,endOfYearMaxIsoWeekDate)) {
               var nextYearIsoWeek1 = isoWeekOne(inputYear + 1);
               return A3($Date$Extra$Compare.is,$Date$Extra$Compare.Before,date,nextYearIsoWeek1) ? {ctor: "_Tuple2"
                                                                                                    ,_0: inputYear
                                                                                                    ,_1: isoWeekOne(inputYear)} : {ctor: "_Tuple2"
                                                                                                                                  ,_0: inputYear + 1
                                                                                                                                  ,_1: nextYearIsoWeek1};
            } else {
               var thisYearIsoWeek1 = isoWeekOne(inputYear);
               return A3($Date$Extra$Compare.is,$Date$Extra$Compare.Before,date,thisYearIsoWeek1) ? {ctor: "_Tuple2"
                                                                                                    ,_0: inputYear - 1
                                                                                                    ,_1: isoWeekOne(inputYear - 1)} : {ctor: "_Tuple2"
                                                                                                                                      ,_0: inputYear
                                                                                                                                      ,_1: thisYearIsoWeek1};
            }
      }();
      var year = _p2._0;
      var week1 = _p2._1;
      var daysSinceWeek1 = ($Date$Extra$Core.toTime(dateAsDay) - $Date$Extra$Core.toTime(week1)) / $Date$Extra$Core.ticksADay | 0;
      return {ctor: "_Tuple3",_0: year,_1: (daysSinceWeek1 / 7 | 0) + 1,_2: $Date$Extra$Core.isoDayOfWeek($Date.dayOfWeek(date))};
   };
   var dayList$ = F3(function (dayLength,date,list) {
      dayList$: while (true) if (_U.eq(dayLength,0)) return list; else {
            var _v1 = dayLength - 1,_v2 = A3($Date$Extra$Period.add,$Date$Extra$Period.Day,1,date),_v3 = A2($List._op["::"],date,list);
            dayLength = _v1;
            date = _v2;
            list = _v3;
            continue dayList$;
         }
   });
   var dayList = F2(function (dayLength,startDate) {    return $List.reverse(A3(dayList$,dayLength,startDate,_U.list([])));});
   return _elm.Date.Extra.Utils.values = {_op: _op,unsafeFromString: unsafeFromString,dayList: dayList,isoWeek: isoWeek,isoWeekOne: isoWeekOne};
};