Elm.Date = Elm.Date || {};
Elm.Date.Extra = Elm.Date.Extra || {};
Elm.Date.Extra.Compare = Elm.Date.Extra.Compare || {};
Elm.Date.Extra.Compare.make = function (_elm) {
   "use strict";
   _elm.Date = _elm.Date || {};
   _elm.Date.Extra = _elm.Date.Extra || {};
   _elm.Date.Extra.Compare = _elm.Date.Extra.Compare || {};
   if (_elm.Date.Extra.Compare.values) return _elm.Date.Extra.Compare.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Date = Elm.Date.make(_elm),
   $Date$Extra$Core = Elm.Date.Extra.Core.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var is3 = F4(function (comp,date1,date2,date3) {
      var time3 = $Date$Extra$Core.toTime(date3);
      var time2 = $Date$Extra$Core.toTime(date2);
      var highBound = A2($Basics.max,time2,time3);
      var lowBound = A2($Basics.min,time2,time3);
      var time1 = $Date$Extra$Core.toTime(date1);
      var _p0 = comp;
      switch (_p0.ctor)
      {case "Between": return _U.cmp(time1,lowBound) > 0 && _U.cmp(time1,highBound) < 0;
         case "BetweenOpenStart": return _U.cmp(time1,lowBound) > -1 && _U.cmp(time1,highBound) < 0;
         case "BetweenOpenEnd": return _U.cmp(time1,lowBound) > 0 && _U.cmp(time1,highBound) < 1;
         default: return _U.cmp(time1,lowBound) > -1 && _U.cmp(time1,highBound) < 1;}
   });
   var is = F3(function (comp,date1,date2) {
      var time2 = $Date$Extra$Core.toTime(date2);
      var time1 = $Date$Extra$Core.toTime(date1);
      var _p1 = comp;
      switch (_p1.ctor)
      {case "Before": return _U.cmp(time1,time2) < 0;
         case "After": return _U.cmp(time1,time2) > 0;
         case "Same": return _U.eq(time1,time2);
         case "SameOrBefore": return _U.cmp(time1,time2) < 1;
         default: return _U.cmp(time1,time2) > -1;}
   });
   var BetweenOpen = {ctor: "BetweenOpen"};
   var BetweenOpenEnd = {ctor: "BetweenOpenEnd"};
   var BetweenOpenStart = {ctor: "BetweenOpenStart"};
   var Between = {ctor: "Between"};
   var SameOrBefore = {ctor: "SameOrBefore"};
   var SameOrAfter = {ctor: "SameOrAfter"};
   var Same = {ctor: "Same"};
   var Before = {ctor: "Before"};
   var After = {ctor: "After"};
   return _elm.Date.Extra.Compare.values = {_op: _op
                                           ,is: is
                                           ,is3: is3
                                           ,After: After
                                           ,Before: Before
                                           ,Same: Same
                                           ,SameOrAfter: SameOrAfter
                                           ,SameOrBefore: SameOrBefore
                                           ,Between: Between
                                           ,BetweenOpenStart: BetweenOpenStart
                                           ,BetweenOpenEnd: BetweenOpenEnd
                                           ,BetweenOpen: BetweenOpen};
};