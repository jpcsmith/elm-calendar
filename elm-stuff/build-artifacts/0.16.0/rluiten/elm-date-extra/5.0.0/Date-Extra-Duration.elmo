Elm.Date = Elm.Date || {};
Elm.Date.Extra = Elm.Date.Extra || {};
Elm.Date.Extra.Duration = Elm.Date.Extra.Duration || {};
Elm.Date.Extra.Duration.make = function (_elm) {
   "use strict";
   _elm.Date = _elm.Date || {};
   _elm.Date.Extra = _elm.Date.Extra || {};
   _elm.Date.Extra.Duration = _elm.Date.Extra.Duration || {};
   if (_elm.Date.Extra.Duration.values) return _elm.Date.Extra.Duration.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Date = Elm.Date.make(_elm),
   $Date$Extra$Core = Elm.Date.Extra.Core.make(_elm),
   $Date$Extra$Create = Elm.Date.Extra.Create.make(_elm),
   $Date$Extra$Internal = Elm.Date.Extra.Internal.make(_elm),
   $Date$Extra$Period = Elm.Date.Extra.Period.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var addMonth = F2(function (monthCount,date) {
      var day = $Date.day(date);
      var monthInt = $Date$Extra$Core.monthToInt($Date.month(date));
      var newMonthInt = monthInt + monthCount;
      var targetMonthInt = A2($Basics._op["%"],newMonthInt,12);
      var yearOffset = _U.cmp(newMonthInt,0) < 0 ? (newMonthInt / 12 | 0) - 1 : newMonthInt / 12 | 0;
      var year = $Date.year(date);
      var inputCivil = A3($Date$Extra$Internal.daysFromCivil,year,monthInt,day);
      var newYear = year + yearOffset;
      var newDay = A2($Basics.min,A2($Date$Extra$Core.daysInMonth,newYear,$Date$Extra$Core.intToMonth(newMonthInt)),day);
      var newCivil = A3($Date$Extra$Internal.daysFromCivil,newYear,targetMonthInt,newDay);
      var daysDifferent = newCivil - inputCivil;
      return A3($Date$Extra$Period.add,$Date$Extra$Period.Day,daysDifferent,date);
   });
   var addYear = F2(function (yearCount,date) {    return A2(addMonth,12 * yearCount,date);});
   var daylightOffsetCompensate = F2(function (dateBefore,dateAfter) {
      var offsetAfter = $Date$Extra$Create.getTimezoneOffset(dateAfter);
      var offsetBefore = $Date$Extra$Create.getTimezoneOffset(dateBefore);
      if (!_U.eq(offsetBefore,offsetAfter)) {
            var adjustedDate = A3($Date$Extra$Period.add,$Date$Extra$Period.Millisecond,(offsetAfter - offsetBefore) * $Date$Extra$Core.ticksAMinute,dateAfter);
            var adjustedOffset = $Date$Extra$Create.getTimezoneOffset(adjustedDate);
            return !_U.eq(adjustedOffset,offsetAfter) ? dateAfter : adjustedDate;
         } else return dateAfter;
   });
   var doAdd = function (duration) {
      var _p0 = duration;
      switch (_p0.ctor)
      {case "Millisecond": return $Date$Extra$Period.add($Date$Extra$Period.Millisecond);
         case "Second": return $Date$Extra$Period.add($Date$Extra$Period.Second);
         case "Minute": return $Date$Extra$Period.add($Date$Extra$Period.Minute);
         case "Hour": return $Date$Extra$Period.add($Date$Extra$Period.Hour);
         case "Day": return $Date$Extra$Period.add($Date$Extra$Period.Day);
         case "Week": return $Date$Extra$Period.add($Date$Extra$Period.Week);
         case "Month": return addMonth;
         default: return addYear;}
   };
   var requireDaylightCompensateInAdd = function (duration) {
      var _p1 = duration;
      switch (_p1.ctor)
      {case "Millisecond": return false;
         case "Second": return false;
         case "Minute": return false;
         case "Hour": return false;
         case "Day": return true;
         case "Week": return true;
         case "Month": return true;
         default: return true;}
   };
   var add = F3(function (duration,addend,date) {
      var outputDate = A3(doAdd,duration,addend,date);
      return requireDaylightCompensateInAdd(duration) ? A2(daylightOffsetCompensate,date,outputDate) : outputDate;
   });
   var Year = {ctor: "Year"};
   var Month = {ctor: "Month"};
   var Week = {ctor: "Week"};
   var Day = {ctor: "Day"};
   var Hour = {ctor: "Hour"};
   var Minute = {ctor: "Minute"};
   var Second = {ctor: "Second"};
   var Millisecond = {ctor: "Millisecond"};
   return _elm.Date.Extra.Duration.values = {_op: _op
                                            ,add: add
                                            ,Millisecond: Millisecond
                                            ,Second: Second
                                            ,Minute: Minute
                                            ,Hour: Hour
                                            ,Day: Day
                                            ,Week: Week
                                            ,Month: Month
                                            ,Year: Year};
};