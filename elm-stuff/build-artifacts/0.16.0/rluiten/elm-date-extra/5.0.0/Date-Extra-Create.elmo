Elm.Date = Elm.Date || {};
Elm.Date.Extra = Elm.Date.Extra || {};
Elm.Date.Extra.Create = Elm.Date.Extra.Create || {};
Elm.Date.Extra.Create.make = function (_elm) {
   "use strict";
   _elm.Date = _elm.Date || {};
   _elm.Date.Extra = _elm.Date.Extra || {};
   _elm.Date.Extra.Create = _elm.Date.Extra.Create || {};
   if (_elm.Date.Extra.Create.values) return _elm.Date.Extra.Create.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Date = Elm.Date.make(_elm),
   $Date$Extra$Core = Elm.Date.Extra.Core.make(_elm),
   $Date$Extra$Internal = Elm.Date.Extra.Internal.make(_elm),
   $Date$Extra$Period = Elm.Date.Extra.Period.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var epochDate = $Date.fromTime(0);
   var epochTimezoneOffset = function () {
      var inMinutes = $Date.hour(epochDate) * 60 + $Date.minute(epochDate);
      return _U.eq($Date.year(epochDate),1969) ? inMinutes - 24 * 60 : inMinutes;
   }();
   var adjustedTicksToDate = function (ticks) {
      return A3($Date$Extra$Period.add,$Date$Extra$Period.Millisecond,ticks - epochTimezoneOffset * $Date$Extra$Core.ticksAMinute,epochDate);
   };
   var dateFromFields = F7(function (year,month,day,hour,minute,second,millisecond) {
      return adjustedTicksToDate(A7($Date$Extra$Internal.ticksFromFields,year,month,day,hour,minute,second,millisecond));
   });
   var timeFromFields = A3(dateFromFields,1970,$Date.Jan,1);
   var getTimezoneOffset = $Date$Extra$Internal.getTimezoneOffset;
   return _elm.Date.Extra.Create.values = {_op: _op,getTimezoneOffset: getTimezoneOffset,dateFromFields: dateFromFields,timeFromFields: timeFromFields};
};