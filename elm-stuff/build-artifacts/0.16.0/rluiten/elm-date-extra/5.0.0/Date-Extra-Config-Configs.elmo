Elm.Date = Elm.Date || {};
Elm.Date.Extra = Elm.Date.Extra || {};
Elm.Date.Extra.Config = Elm.Date.Extra.Config || {};
Elm.Date.Extra.Config.Configs = Elm.Date.Extra.Config.Configs || {};
Elm.Date.Extra.Config.Configs.make = function (_elm) {
   "use strict";
   _elm.Date = _elm.Date || {};
   _elm.Date.Extra = _elm.Date.Extra || {};
   _elm.Date.Extra.Config = _elm.Date.Extra.Config || {};
   _elm.Date.Extra.Config.Configs = _elm.Date.Extra.Config.Configs || {};
   if (_elm.Date.Extra.Config.Configs.values) return _elm.Date.Extra.Config.Configs.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Date$Extra$Config = Elm.Date.Extra.Config.make(_elm),
   $Date$Extra$Config$Config_en_au = Elm.Date.Extra.Config.Config_en_au.make(_elm),
   $Date$Extra$Config$Config_en_us = Elm.Date.Extra.Config.Config_en_us.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Regex = Elm.Regex.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var configs = $Dict.fromList(_U.list([{ctor: "_Tuple2",_0: "en_au",_1: $Date$Extra$Config$Config_en_au.config}
                                        ,{ctor: "_Tuple2",_0: "en_us",_1: $Date$Extra$Config$Config_en_us.config}]));
   var getConfig = function (id) {
      var lowerId = $String.toLower(id);
      var fixedId = A4($Regex.replace,$Regex.All,$Regex.regex("-"),function (_p0) {    return "_";},lowerId);
      return A2($Maybe.withDefault,$Date$Extra$Config$Config_en_us.config,A2($Dict.get,fixedId,configs));
   };
   return _elm.Date.Extra.Config.Configs.values = {_op: _op,getConfig: getConfig,configs: configs};
};