Elm.Counter = Elm.Counter || {};
Elm.Counter.make = function (_elm) {
   "use strict";
   _elm.Counter = _elm.Counter || {};
   if (_elm.Counter.values) return _elm.Counter.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Date = Elm.Date.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm);
   var _op = {};
   var countStyle = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "font-size",_1: "20px"}
                                                   ,{ctor: "_Tuple2",_0: "font-family",_1: "monospace"}
                                                   ,{ctor: "_Tuple2",_0: "display",_1: "inline-block"}
                                                   ,{ctor: "_Tuple2",_0: "width",_1: "50px"}
                                                   ,{ctor: "_Tuple2",_0: "text-align",_1: "center"}]));
   var createCalendarDay = function (day) {    return A2($Html.td,_U.list([]),_U.list([$Html.text($Basics.toString(day))]));};
   var layoutLastWeek = function (date) {    return A2($Html.tr,_U.list([]),_U.list([]));};
   var layoutFirstWeek = function (date) {    return A2($Html.tr,_U.list([]),_U.list([]));};
   var secondsInWeek = 7 * 24 * 60 * 60;
   var incrementByWeek = function (date) {    return $Date.fromTime($Time.inSeconds($Date.toTime(date)) + secondsInWeek);};
   var layoutWeek = function (date) {
      return _U.eq($Date.day(date),1) ? layoutFirstWeek(date) : !_U.eq($Date.month(incrementByWeek(date)),
      $Date.month(date)) ? layoutLastWeek(date) : A2($Html.tr,_U.list([]),A2($List.map,createCalendarDay,_U.range($Date.day(date),$Date.day(date) + 6)));
   };
   var view = F2(function (address,model) {
      return A2($Html.table,
      _U.list([]),
      _U.list([A2($Html.thead,
              _U.list([]),
              _U.list([A2($Html.tr,
              _U.list([]),
              _U.list([A2($Html.th,_U.list([]),_U.list([$Html.text("S")]))
                      ,A2($Html.th,_U.list([]),_U.list([$Html.text("M")]))
                      ,A2($Html.th,_U.list([]),_U.list([$Html.text("T")]))
                      ,A2($Html.th,_U.list([]),_U.list([$Html.text("W")]))
                      ,A2($Html.th,_U.list([]),_U.list([$Html.text("T")]))
                      ,A2($Html.th,_U.list([]),_U.list([$Html.text("F")]))
                      ,A2($Html.th,_U.list([]),_U.list([$Html.text("S")]))]))]))
              ,layoutWeek($Date.fromTime(2.0e8))]));
   });
   var update = F2(function (action,model) {    var _p0 = action;if (_p0.ctor === "Increment") {    return model + 1;} else {    return model - 1;}});
   var Decrement = {ctor: "Decrement"};
   var Increment = {ctor: "Increment"};
   return _elm.Counter.values = {_op: _op
                                ,Increment: Increment
                                ,Decrement: Decrement
                                ,update: update
                                ,view: view
                                ,secondsInWeek: secondsInWeek
                                ,layoutWeek: layoutWeek
                                ,layoutFirstWeek: layoutFirstWeek
                                ,layoutLastWeek: layoutLastWeek
                                ,createCalendarDay: createCalendarDay
                                ,incrementByWeek: incrementByWeek
                                ,countStyle: countStyle};
};