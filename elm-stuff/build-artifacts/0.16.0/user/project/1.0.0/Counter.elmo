Elm.Counter = Elm.Counter || {};
Elm.Counter.make = function (_elm) {
   "use strict";
   _elm.Counter = _elm.Counter || {};
   if (_elm.Counter.values) return _elm.Counter.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Date = Elm.Date.make(_elm),
   $Date$Extra$Core = Elm.Date.Extra.Core.make(_elm),
   $Date$Extra$Utils = Elm.Date.Extra.Utils.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var firstWeekOfMonth = function (date) {
      var days = A2($Date$Extra$Core.daysBackToStartOfWeek,$Date.Sun,$Date.dayOfWeek($Date$Extra$Core.toFirstOfMonth(date)));
      return _U.range(1,days);
   };
   var lastWeekOfMonth = function (date) {
      var daysInMonth = $Date$Extra$Core.daysInMonthDate(date);
      var days = A2($Date$Extra$Core.daysBackToStartOfWeek,$Date.dayOfWeek($Date$Extra$Core.lastOfMonthDate(date)),$Date.Sun);
      return _U.range(daysInMonth - days,daysInMonth);
   };
   var viewDays = F2(function (days,isExternal) {
      return A2($List.map,
      $Html.td(_U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "other-month",_1: isExternal}]))])),
      A2($List.map,$List.repeat(1),A2($List.map,$Html.text,A2($List.map,$Basics.toString,days))));
   });
   var splitWeeks = function (days) {
      if (_U.eq($List.length(days),0)) return _U.list([]); else {
            var remainingDays = A2($List.drop,7,days);
            var thisWeek = A2($List.repeat,1,A2($List.take,7,days));
            return A2($List.append,thisWeek,splitWeeks(remainingDays));
         }
   };
   var viewMonth = function (date) {
      var nextDays = lastWeekOfMonth($Date$Extra$Core.lastOfPrevMonthDate(date));
      var currentDays = _U.range(1,$Date$Extra$Core.daysInMonthDate(date));
      var previousDays = firstWeekOfMonth($Date$Extra$Core.firstOfNextMonthDate(date));
      return A2($List.map,
      $Html.tr(_U.list([])),
      splitWeeks(A2($List.append,A2(viewDays,nextDays,true),A2($List.append,A2(viewDays,currentDays,false),A2(viewDays,previousDays,true)))));
   };
   var view = F2(function (address,model) {
      var header = A2($Html.thead,
      _U.list([]),
      A2($List.map,$Html.th(_U.list([])),A2($List.map,$List.repeat(1),A2($List.map,$Html.text,_U.list(["S","M","T","W","T","F","S"])))));
      var other = A2($Debug.log,"Address",address);
      return A2($Html.table,_U.list([]),A2($List._op["::"],header,viewMonth($Date$Extra$Utils.unsafeFromString("January, 1, 2016"))));
   });
   var Decrement = {ctor: "Decrement"};
   var Increment = {ctor: "Increment"};
   var emptyModel = {uid: 0,name: ""};
   var Model = F2(function (a,b) {    return {uid: a,name: b};});
   return _elm.Counter.values = {_op: _op
                                ,Model: Model
                                ,emptyModel: emptyModel
                                ,Increment: Increment
                                ,Decrement: Decrement
                                ,view: view
                                ,splitWeeks: splitWeeks
                                ,viewDays: viewDays
                                ,viewMonth: viewMonth
                                ,lastWeekOfMonth: lastWeekOfMonth
                                ,firstWeekOfMonth: firstWeekOfMonth};
};